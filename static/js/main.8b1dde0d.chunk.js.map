{"version":3,"sources":["componenets/Center.tsx","componenets/Header.tsx","componenets/Location.tsx","componenets/Icon.tsx","componenets/Temperature.tsx","componenets/Description.tsx","helpers/functions.ts","componenets/Day.tsx","pages/Forecast.tsx","pages/Home.tsx","pages/TimeMachine.tsx","helpers/getWeather.ts","componenets/Loading.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Center","id","children","height","colClass","backgroundColor","Row","style","className","Header","props","setUnit","Nav","Item","Link","as","to","bsPrefix","offlabel","onlabel","size","onstyle","offstyle","checked","onChange","sessionStorage","unit","Location","location","Icon","options","useEffect","icons","Skycons","color","add","instance","icon","play","width","iconWidth","iconHeight","Temperature","tempC","tempF","Description","description","celsius","fahrenheit","epochToDate","epoch","date","Date","setUTCSeconds","Day","day","precipitation","high","low","celsiusL","Math","round","celsiusH","textAlign","margin","Col","getDay","paddingRight","paddingLeft","Forecast","weather","week","JSON","parse","daily","data","pop","padding","map","idx","time","temperatureHigh","temperatureLow","precipProbability","key","Home","weatherInfo","fontSize","TimeMachine","getWeather","position","a","fetch","lat","long","response","json","Loading","name","App","useState","setWeather","loaded","setLoaded","setItem","positon","then","newOptions","Object","assign","timezone","split","replace","currently","temperature","summary","stringify","refreshWeather","navigator","geolocation","getCurrentPosition","coords","longitude","latitude","alert","initWeather","variant","defaultActiveKey","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b1dde0d.chunk.js","sourcesContent":["import React, { ReactNode } from \"react\";\nimport Row from \"react-bootstrap/Row\";\n\ntype Center = {\n  children?: ReactNode;\n  height: string;\n  id?: string;\n  backgroundColor?: string;\n  colClass: number | string;\n};\nfunction Center({ id, children, height, colClass, backgroundColor }: Center) {\n  return (\n    <Row id={id} style={{ height: height, backgroundColor: backgroundColor }}>\n      <div className={`col ${colClass} ml-auto mr-auto my-auto`}>\n        {children}\n      </div>\n    </Row>\n  );\n}\n\nexport default Center;\n","import React from \"react\";\nimport Nav, { NavProps } from \"react-bootstrap/Nav\";\nimport { Link } from \"react-router-dom\";\nimport BootstrapSwitchButton from \"bootstrap-switch-button-react\";\nimport Center from \"./Center\";\n\ntype HeaderProp = {\n  props: NavProps;\n  setUnit: React.Dispatch<React.SetStateAction<\"C\" | \"F\">>;\n};\nfunction Header({ props, setUnit }: HeaderProp) {\n  function handleUnitChange() {\n    if (sessionStorage.unit === \"F\") setUnit(\"C\");\n    else setUnit(\"F\");\n  }\n  return (\n    <Nav {...props}>\n      <Nav.Item>\n        <Nav.Link as={Link} to=\"/\">\n          Home\n        </Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link as={Link} to=\"/timemachine\">\n          Time Machine\n        </Nav.Link>\n      </Nav.Item>\n      <Nav.Item bsPrefix=\"ml-auto mr-3\">\n        <Center height=\"100%\" colClass=\"col-auto\">\n          <BootstrapSwitchButton\n            offlabel=\"°C\"\n            onlabel=\"°F\"\n            size=\"sm\"\n            onstyle=\"primary\"\n            offstyle=\"secondary\"\n            checked={true}\n            onChange={handleUnitChange}\n          />\n        </Center>\n      </Nav.Item>\n    </Nav>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport CSS from \"csstype\";\ntype LocationProp = {\n  location: string;\n  style?: CSS.Properties;\n};\n\nfunction Location({ style, location }: LocationProp) {\n  return (\n    <div style={style} className={\"location\"}>\n      {location}\n    </div>\n  );\n}\n\nexport default Location;\n","import React, { useEffect } from \"react\";\nimport { Skycons } from \"skycons-ts\";\nimport { IconInfo } from \"../helpers/interfaces\";\ntype IconProp = {\n  options: IconInfo;\n};\n\nfunction Icon({ options }: IconProp) {\n  useEffect(function () {\n    let icons = new Skycons({ color: options.color });\n    icons.add(`icon${options.instance}`, options.icon);\n    icons.play();\n  });\n  return (\n    <canvas\n      id={`icon${options.instance}`}\n      width={options.iconWidth}\n      height={options.iconHeight}\n    />\n  );\n}\n\nexport default Icon;\n","import React, { CSSProperties } from \"react\";\ntype TemperatureProp = {\n  tempC: number;\n  tempF: number;\n  unit: \"F\" | \"C\";\n  style?: CSSProperties;\n};\nfunction Temperature({ style, tempC, tempF, unit }: TemperatureProp) {\n  if (unit === \"C\")\n    return (\n      <div style={style} className=\"temp-c\">\n        {tempC}\n      </div>\n    );\n  else\n    return (\n      <div style={style} className=\"temp-f\">\n        {tempF}\n      </div>\n    );\n}\nexport default Temperature;\n","import React from \"react\";\nimport CSS from \"csstype\";\ntype DescriptionProp = {\n  description: string;\n  style?: CSS.Properties;\n};\nfunction Description({ style, description }: DescriptionProp) {\n  return (\n    <div style={style} className=\"description\">\n      {description}\n    </div>\n  );\n}\n\nexport default Description;\n","import {Geo, WeatherInfo} from \"./interfaces\";\r\nimport React from \"react\";\r\nimport {weather} from \"../App\";\r\nimport {DayOfWeek} from \"./types\";\r\n\r\nexport function initWeather(position: Geo, weatherInfo: WeatherInfo, setLoaded :React.Dispatch<React.SetStateAction<boolean>>){\r\n    function success(location: any) {\r\n        position.long = location.coords.longitude;\r\n        position.lat = location.coords.latitude;\r\n        sessionStorage.setItem(\"position\", JSON.stringify(position))\r\n        weather().then(weather=> {\r\n                weatherInfo.location = weather.timezone.split(\"/\")[1].replace(\"_\", \" \");\r\n                weatherInfo.tempF =Math.round( weather.currently.temperature);\r\n                weatherInfo.tempC =Math.round(  celsius( weather.currently.temperature));\r\n                weatherInfo.icon = weather.currently.icon;\r\n                weatherInfo.description = weather.currently.summary;\r\n                sessionStorage.setItem(\"weather\", JSON.stringify(weather));\r\n                setLoaded(true);\r\n            })\r\n    }\r\n    function fail() {\r\n        alert(\"Error getting location\");\r\n    }\r\n    if (navigator.geolocation) {\r\n         navigator.geolocation.getCurrentPosition(success, fail);\r\n    } else {\r\n        alert(\"Sorry, your browser does not support geolocation services.\");\r\n    }\r\n};\r\n\r\nexport function refreshWeather(setWeather :React.Dispatch<React.SetStateAction<WeatherInfo>>, setLoaded :React.Dispatch<React.SetStateAction<boolean>>){\r\n    weather().then(weather=> {\r\n        setWeather((options)=>{\r\n            let newOptions = Object.assign({}, options);\r\n            newOptions.location = weather.timezone.split(\"/\")[1].replace(\"_\", \" \");\r\n            newOptions.tempF =Math.round( weather.currently.temperature);\r\n            newOptions.tempC =Math.round(  celsius( weather.currently.temperature));\r\n            newOptions.icon = weather.currently.icon;\r\n            newOptions.description = weather.currently.summary;\r\n            sessionStorage.setItem(\"weather\", JSON.stringify(weather));\r\n            setLoaded(true);\r\n            return newOptions;\r\n        });\r\n    });\r\n}\r\n\r\nexport function celsius(fahrenheit: number){\r\nreturn (fahrenheit - 32) * 5 / 9;\r\n}\r\n\r\nexport function truthy (val:any) {\r\n    if (val) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function epochToDate(epoch: number) {\r\n    let date = new Date(0);\r\n    date.setUTCSeconds(epoch);\r\n    return date;\r\n}\r\n\r\nexport function dateToDayOfWeek(date: Date): DayOfWeek {\r\n    let dayLookup: Array<DayOfWeek>;\r\n    dayLookup = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    return dayLookup[date.getDay()];\r\n}\r\n","import React, { CSSProperties } from \"react\";\nimport { IconKey } from \"skycons-ts\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Icon from \"./Icon\";\nimport { celsius, dateToDayOfWeek } from \"../helpers/functions\";\nimport Temperature from \"./Temperature\";\n\ntype DayProp = {\n  day: Date;\n  precipitation: number;\n  icon: IconKey;\n  low: number;\n  high: number;\n  unit: \"C\" | \"F\";\n};\n\nfunction Day({ day, precipitation, high, icon, low, unit }: DayProp) {\n  let celsiusL = Math.round(celsius(low));\n  let celsiusH = Math.round(celsius(high));\n  let style = {\n    textAlign: \"left\",\n    margin: \"0.2vw\",\n  } as CSSProperties;\n  let prefix = \"col my-auto\";\n  return (\n    <Row style={{ ...style }}>\n      <Col bsPrefix=\"col col-3 my-auto\">{`${dateToDayOfWeek(day)}`}</Col>\n      <Col\n        style={{ paddingRight: \"0px\" }}\n        bsPrefix={`col col-3 my-auto precipitation`}\n      >{`${Math.round(precipitation * 100)}%`}</Col>\n      <Col style={{ paddingLeft: \"0px\" }} bsPrefix={prefix}>\n        <Icon\n          options={{\n            color: \"white\",\n            icon: icon,\n            iconHeight: 40,\n            iconWidth: 40,\n            instance: day.getDay() + 2,\n          }}\n        />\n      </Col>\n      <Col bsPrefix={prefix}>\n        <Temperature style={style} tempC={celsiusL} tempF={low} unit={unit} />\n      </Col>\n      <Col bsPrefix={prefix}>\n        <Temperature style={style} tempC={celsiusH} tempF={high} unit={unit} />\n      </Col>\n    </Row>\n  );\n}\n\nexport default Day;\n","import React from \"react\";\nimport Day from \"../componenets/Day\";\nimport { epochToDate } from \"../helpers/functions\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\ntype ForecastProp = {\n  id: string;\n  unit: \"C\" | \"F\";\n};\n\nfunction Forecast({ id, unit }: ForecastProp) {\n  if (sessionStorage.weather) {\n    const weather = JSON.parse(sessionStorage.weather);\n    const week = weather.daily.data;\n    week.pop();\n    return (\n      <Row id={id} style={{ padding: \"15px\" }}>\n        <Col bsPrefix=\"col col-xs-auto col-lg-6 mr-auto ml-auto\">\n          {week.map((day: any, idx: number) => (\n            <Day\n              day={epochToDate(day.time)}\n              high={Math.round(day.temperatureHigh)}\n              icon={day.icon}\n              low={Math.round(day.temperatureLow)}\n              precipitation={day.precipProbability}\n              key={idx}\n              unit={unit}\n            />\n          ))}\n        </Col>\n      </Row>\n    );\n  } else return <div></div>;\n}\n\nexport default Forecast;\n","import Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Center from \"../componenets/Center\";\nimport Location from \"../componenets/Location\";\nimport Icon from \"../componenets/Icon\";\nimport Temperature from \"../componenets/Temperature\";\nimport Description from \"../componenets/Description\";\nimport React from \"react\";\nimport { IconInfo, WeatherInfo } from \"../helpers/interfaces\";\nimport Forecast from \"./Forecast\";\n\nfunction Home(weatherInfo: WeatherInfo & IconInfo) {\n  return (\n    <div className=\"main\">\n      <Center id=\"home\" colClass=\"col-xs-auto col-lg-6\" height=\"100%\">\n        <Row style={{ margin: \"40px 0 60px 0\" }}>\n          <Col>\n            <Center colClass=\"col-auto\" height=\"100%\">\n              <Location\n                style={{ fontSize: \"2.7em\" }}\n                location={weatherInfo.location}\n              />\n            </Center>\n          </Col>\n          <Col>\n            <Center colClass=\"col-auto\" height=\"100%\">\n              <Icon options={weatherInfo} />\n            </Center>\n          </Col>\n        </Row>\n        <Row style={{ margin: \"0 0 60px 0\" }}>\n          <Col>\n            <Center colClass=\"col-auto\" height=\"100%\">\n              <Temperature\n                style={{ textAlign: \"center\", fontSize: \"3rem\" }}\n                tempC={weatherInfo.tempC}\n                tempF={weatherInfo.tempF}\n                unit={sessionStorage.unit}\n              />\n              <Description\n                style={{ fontSize: \"1rem\" }}\n                description={weatherInfo.description}\n              />\n            </Center>\n          </Col>\n        </Row>\n      </Center>\n      <Forecast id=\"forecast\" unit={sessionStorage.unit} />\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport Center from \"../componenets/Center\";\n\nfunction TimeMachine() {\n  return (\n    <Center height=\"100vh\" colClass=\"col-auto\">\n      <div style={{ fontSize: \"2rem\", textAlign: \"center\" }}>Coming Soon</div>\n    </Center>\n  );\n}\n\nexport default TimeMachine;\n","import {Geo} from \"./interfaces\";\r\n\r\nexport async function getWeather(position: Geo){\r\n    let response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/9ab479cdd941d8bb66332fa8f81551b9/${position.lat},${position.long}`,{\r\n    });\r\n    let data = await response.json();\r\n    return data;\r\n}","import React from \"react\";\nimport Spinner from \"react-spinkit\";\nimport Center from \"./Center\";\ntype LoadingProp = {\n  name:\n    | \"three-bounce\"\n    | \"double-bounce\"\n    | \"rotating-plane\"\n    | \"folding-cube\"\n    | \"wave\"\n    | \"wandering-cubes\"\n    | \"pulse\"\n    | \"chasing-dots\"\n    | \"circle\"\n    | \"cube-grid\"\n    | \"wordpress\"\n    | \"ball-grid-beat\"\n    | \"ball-grid-pulse\"\n    | \"line-spin-fade-loader\"\n    | \"ball-spin-fade-loader\"\n    | \"ball-pulse-rise\"\n    | \"line-scale\"\n    | \"line-scale-pulse-out\"\n    | \"line-scale-pulse-out-rapid\"\n    | \"line-scale-party\"\n    | \"ball-triangle-path\"\n    | \"ball-scale-ripple-multiple\"\n    | \"ball-pulse-sync\"\n    | \"ball-beat\"\n    | \"ball-scale-multiple\"\n    | \"ball-zig-zag\"\n    | \"ball-zig-zag-deflect\"\n    | \"ball-clip-rotate\"\n    | \"ball-clip-rotate-pulse\"\n    | \"ball-clip-rotate-multiple\"\n    | \"ball-scale-ripple\"\n    | \"triangle-skew-spin\"\n    | \"pacman\";\n  color: string;\n};\nfunction Loading({ name, color }: LoadingProp) {\n  return (\n    <Center\n      backgroundColor=\"rgb(36,36,36)\"\n      height=\"100vh\"\n      colClass=\"col-auto loading\"\n    >\n      <Spinner name={name} color={color} />\n    </Center>\n  );\n}\n\nexport default Loading;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Header from \"./componenets/Header\";\nimport Home from \"./pages/Home\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport TimeMachine from \"./pages/TimeMachine\";\nimport { initWeather, refreshWeather, truthy } from \"./helpers/functions\";\nimport { getWeather } from \"./helpers/getWeather\";\nimport { Geo, WeatherInfo } from \"./helpers/interfaces\";\nimport Loading from \"./componenets/Loading\";\n\nexport async function weather() {\n  return await getWeather(JSON.parse(sessionStorage.position));\n}\nfunction App() {\n  let options = {\n    color: \"white\",\n    iconHeight: 128,\n    iconWidth: 128,\n    instance: 1,\n    description: \"rain\",\n  } as WeatherInfo;\n\n  const [weather, setWeather] = useState(options);\n  let [loaded, setLoaded] = useState(false);\n  let [unit, setUnit] = useState(\"F\" as \"C\" | \"F\");\n  sessionStorage.setItem(\"unit\", unit);\n  useEffect(\n    function () {\n      let position = {} as Geo;\n      if (!loaded) {\n        if (!truthy(sessionStorage.positon))\n          initWeather(position, options, setLoaded);\n        else refreshWeather(setWeather, setLoaded);\n      }\n    },\n    [loaded, unit, options]\n  );\n  if (loaded)\n    return (\n      <Router>\n        <Header\n          setUnit={setUnit}\n          props={{ variant: \"tabs\", defaultActiveKey: \"/home\" }}\n        />\n        <Switch>\n          <Route exact path=\"/\" component={() => <Home {...weather} />} />\n          <Route exact path=\"/timemachine\" component={TimeMachine} />\n        </Switch>\n      </Router>\n    );\n  else return <Loading name=\"rotating-plane\" color=\"white\" />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}